\hypertarget{classLoadBalancer}{}\doxysection{Load\+Balancer Class Reference}
\label{classLoadBalancer}\index{LoadBalancer@{LoadBalancer}}


A class representing a load balancer that distributes requests to a pool of web servers.  




{\ttfamily \#include $<$Load\+Balancer.\+h$>$}



Collaboration diagram for Load\+Balancer\+:
% FIG 0
\doxysubsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\hyperlink{classLoadBalancer_a9f837971f41bbdd69c59adf6b59d7a2e}{Load\+Balancer}} (int server\+Count)
\begin{DoxyCompactList}\small\item\em Constructs a new load balancer with the given number of servers. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classLoadBalancer_a3660dc63e2169f39cbd0d3cdd73506e2}{perform\+Cycle}} ()
\begin{DoxyCompactList}\small\item\em Performs a single clock cycle for the load balancer. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classLoadBalancer_ae0870af99cd5d558921fa06a910c5062}\label{classLoadBalancer_ae0870af99cd5d558921fa06a910c5062}} 
bool {\bfseries has\+Items} ()
\begin{DoxyCompactList}\small\item\em Checks if all the servers are idle. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{classLoadBalancer_a53a98f96b3ed2f4940d16b24e16f3d48}{get\+Time}} ()
\begin{DoxyCompactList}\small\item\em gets the clock get\+Time \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classLoadBalancer_af0e3c5c71a68324cd635f52c1430752e}\label{classLoadBalancer_af0e3c5c71a68324cd635f52c1430752e}} 
void {\bfseries inc\+Time} ()
\begin{DoxyCompactList}\small\item\em increments clock time by 1 \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classLoadBalancer_a961da8627c32a417bee6fc51e7248b39}{add\+Request}} (\mbox{\hyperlink{classRequest}{Request}} newreq)
\begin{DoxyCompactList}\small\item\em Adds a new request to the load balancer. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classLoadBalancer_a37246b6841e5b17ac4e6733a670fd747}{validator}} ()
\begin{DoxyCompactList}\small\item\em checks current state of load balancer \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Public Attributes}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classLoadBalancer_a39ab49555b8aa9dd038739b43e792b01}\label{classLoadBalancer_a39ab49555b8aa9dd038739b43e792b01}} 
queue$<$ \mbox{\hyperlink{classRequest}{Request}} $>$ {\bfseries requests}
\begin{DoxyCompactList}\small\item\em the queue of requests for the servers \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classLoadBalancer_a64f65307b9957f2fa99bb76d2b92d966}\label{classLoadBalancer_a64f65307b9957f2fa99bb76d2b92d966}} 
vector$<$ \mbox{\hyperlink{classWebServer}{Web\+Server}} $>$ {\bfseries servers}
\begin{DoxyCompactList}\small\item\em stores the servers the load balancer is responsible for \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classLoadBalancer_a70c3d61934c60fc0828588cd0fc0c869}\label{classLoadBalancer_a70c3d61934c60fc0828588cd0fc0c869}} 
int {\bfseries clock\+Time}
\begin{DoxyCompactList}\small\item\em the current clock time, stored as an integer \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classLoadBalancer_a1ca22603ada08ec2f73407dfef4083a8}\label{classLoadBalancer_a1ca22603ada08ec2f73407dfef4083a8}} 
bool {\bfseries servers\+Done}
\begin{DoxyCompactList}\small\item\em boolean representing the state of the servers. true if all of them are done \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
A class representing a load balancer that distributes requests to a pool of web servers. 

\doxysubsection{Constructor \& Destructor Documentation}
\mbox{\Hypertarget{classLoadBalancer_a9f837971f41bbdd69c59adf6b59d7a2e}\label{classLoadBalancer_a9f837971f41bbdd69c59adf6b59d7a2e}} 
\index{LoadBalancer@{LoadBalancer}!LoadBalancer@{LoadBalancer}}
\index{LoadBalancer@{LoadBalancer}!LoadBalancer@{LoadBalancer}}
\doxysubsubsection{\texorpdfstring{LoadBalancer()}{LoadBalancer()}}
{\footnotesize\ttfamily Load\+Balancer\+::\+Load\+Balancer (\begin{DoxyParamCaption}\item[{int}]{server\+Count }\end{DoxyParamCaption})}



Constructs a new load balancer with the given number of servers. 


\begin{DoxyParams}{Parameters}
{\em server\+Count} & The number of servers to create \\
\hline
\end{DoxyParams}


\doxysubsection{Member Function Documentation}
\mbox{\Hypertarget{classLoadBalancer_a961da8627c32a417bee6fc51e7248b39}\label{classLoadBalancer_a961da8627c32a417bee6fc51e7248b39}} 
\index{LoadBalancer@{LoadBalancer}!addRequest@{addRequest}}
\index{addRequest@{addRequest}!LoadBalancer@{LoadBalancer}}
\doxysubsubsection{\texorpdfstring{addRequest()}{addRequest()}}
{\footnotesize\ttfamily void Load\+Balancer\+::add\+Request (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classRequest}{Request}}}]{newreq }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}



Adds a new request to the load balancer. 


\begin{DoxyParams}{Parameters}
{\em newreq} & the new request to be added \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classLoadBalancer_a53a98f96b3ed2f4940d16b24e16f3d48}\label{classLoadBalancer_a53a98f96b3ed2f4940d16b24e16f3d48}} 
\index{LoadBalancer@{LoadBalancer}!getTime@{getTime}}
\index{getTime@{getTime}!LoadBalancer@{LoadBalancer}}
\doxysubsubsection{\texorpdfstring{getTime()}{getTime()}}
{\footnotesize\ttfamily int Load\+Balancer\+::get\+Time (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}



gets the clock get\+Time 

\begin{DoxyReturn}{Returns}
the clock time 
\end{DoxyReturn}
\mbox{\Hypertarget{classLoadBalancer_a3660dc63e2169f39cbd0d3cdd73506e2}\label{classLoadBalancer_a3660dc63e2169f39cbd0d3cdd73506e2}} 
\index{LoadBalancer@{LoadBalancer}!performCycle@{performCycle}}
\index{performCycle@{performCycle}!LoadBalancer@{LoadBalancer}}
\doxysubsubsection{\texorpdfstring{performCycle()}{performCycle()}}
{\footnotesize\ttfamily void Load\+Balancer\+::perform\+Cycle (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Performs a single clock cycle for the load balancer. 

This function iterates through all the servers and checks if any of them have completed their current task. If a server is available, it will start processing the next request in the queue. If no servers are available and the request queue is empty, it sets the {\ttfamily servers\+Done} flag to true.

This function iterates through all the servers and checks if any of them have completed their current task. If a server is available, it will start processing the next request in the queue. If no servers are available and the request queue is empty, it sets the {\ttfamily servers\+Done} flag to true. If there are no tasks and a server is done, then the server sits idle waiting. \mbox{\Hypertarget{classLoadBalancer_a37246b6841e5b17ac4e6733a670fd747}\label{classLoadBalancer_a37246b6841e5b17ac4e6733a670fd747}} 
\index{LoadBalancer@{LoadBalancer}!validator@{validator}}
\index{validator@{validator}!LoadBalancer@{LoadBalancer}}
\doxysubsubsection{\texorpdfstring{validator()}{validator()}}
{\footnotesize\ttfamily void Load\+Balancer\+::validator (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



checks current state of load balancer 

Queries the servers and checks the time remaining for them to complete their tasks. Then checks how many requests are in the queue. 

The documentation for this class was generated from the following files\+:\begin{DoxyCompactItemize}
\item 
Load\+Balancer.\+h\item 
Load\+Balancer.\+cpp\end{DoxyCompactItemize}
